name: Deploy API to AWS EC2 with CodeDeploy

on:
  #  push:
  #    branches:
  #      - main
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to build and deploy'
        required: true
        default: 'manual-deploy'

env:
  DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/techinsights-api
  AWS_REGION: ap-northeast-2
  CODEDEPLOY_APP_NAME: techinsights-api
  CODEDEPLOY_DEPLOYMENT_GROUP: api-prod-group
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Run tests with Gradle
        run: ./gradlew test

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set image tags
        id: image
        run: |
          SPECIFIC_TAG=""
          if [ "${{ github.event_name }}" = "push" ]; then
            SPECIFIC_TAG=$(date -u +'%Y%m%d%H%M')
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            SPECIFIC_TAG="${{ github.event.inputs.image_tag }}"
          fi
          
          {
            echo 'tags<<EOF'
            echo "${{ env.DOCKERHUB_REPO }}:latest"
            echo "${{ env.DOCKERHUB_REPO }}:${SPECIFIC_TAG}"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"
          echo "specific_tag=${SPECIFIC_TAG}" >> $GITHUB_OUTPUT

      - name: Build and push image to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./api/Dockerfile
          push: true
          tags: ${{ steps.image.outputs.tags }}

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_FOR_OIDC }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Prepare deployment artifact
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          IMAGE_TAG: ${{ steps.image.outputs.specific_tag }}
          GRAFANA_CLOUD_URL: ${{ secrets.GRAFANA_CLOUD_URL }}
          GRAFANA_CLOUD_USERNAME: ${{ secrets.GRAFANA_CLOUD_USERNAME }}
          GRAFANA_CLOUD_API_KEY: ${{ secrets.GRAFANA_CLOUD_API_KEY }}
        run: |
          sed -i "s|DOCKERHUB_USERNAME_PLACEHOLDER|${DOCKERHUB_USERNAME}|g" docker-compose.prod.yml
          sed -i "s|IMAGE_TAG_PLACEHOLDER|${IMAGE_TAG}|g" docker-compose.prod.yml
          
          sed -i "s|GRAFANA_CLOUD_URL_PLACEHOLDER|${GRAFANA_CLOUD_URL}|g" monitoring/grafana-agent.yml
          sed -i "s|GRAFANA_CLOUD_USERNAME_PLACEHOLDER|${GRAFANA_CLOUD_USERNAME}|g" monitoring/grafana-agent.yml
          sed -i "s|GRAFANA_CLOUD_API_KEY_PLACEHOLDER|${GRAFANA_CLOUD_API_KEY}|g" monitoring/grafana-agent.yml
          
          
          
          zip -r deploy.zip . -x ".git/*" ".github/*" ".idea/*" "build/*" ".gradle/*"

      - name: Upload artifact to S3
        run: |
          aws s3 cp deploy.zip s3://${{ env.S3_BUCKET_NAME }}/techinsights-api/${{ steps.image.outputs.specific_tag }}/deploy.zip

      - name: Start CodeDeploy deployment
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODEDEPLOY_APP_NAME }} \
            --deployment-group-name ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }} \
            --s3-location bucket=${{ env.S3_BUCKET_NAME }},key=techinsights-api/${{ steps.image.outputs.specific_tag }}/deploy.zip,bundleType=zip \
            --description "Deployment for image tag ${{ steps.image.outputs.specific_tag }}"