# 운영 환경에서 사용할 Docker Compose 파일
version: '3.8'

services:
  tech-insights-api:
    image: DOCKERHUB_USERNAME_PLACEHOLDER/techinsights-api:IMAGE_TAG_PLACEHOLDER
    container_name: techinsights-api-prod
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - JAVA_OPTS=-Xms256m -Xmx512m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xlog:gc*:file=/tmp/gc.log:time,level,tags
    restart: always
    network_mode: host
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:latest
    container_name: techinsights-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/ssl/cloudflare:/etc/ssl/cloudflare:ro
    depends_on:
      tech-insights-api:
        condition: service_healthy
    restart: always
    network_mode: host

  # 모니터링 서비스들 - t2.micro에서는 메모리 부족으로 주석 처리
#  node-exporter:
#    image: prom/node-exporter:latest
#    container_name: node-exporter
#    restart: always
#    command:
#      - '--path.rootfs=/host'
#      - '--path.procfs=/host/proc'
#      - '--path.sysfs=/host/sys'
#      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
#    volumes:
#      - /:/host:ro,rslave
#      - /proc:/host/proc:ro
#      - /sys:/host/sys:ro
#    network_mode: host
#    pid: host
#    deploy:
#      resources:
#        limits:
#          cpus: '0.1'
#          memory: 64M
#
#  # Docker 컨테이너 메트릭 수집
#  cadvisor:
#    image: gcr.io/cadvisor/cadvisor:latest
#    container_name: cadvisor
#    restart: always
#    privileged: true
#    command:
#      - '-port=8081'
#    network_mode: host
#    devices:
#      - /dev/kmsg
#    ports:
#      - "8081:8080"
#    volumes:
#      - /:/rootfs:ro
#      - /var/run:/var/run:ro
#      - /sys:/sys:ro
#      - /var/lib/docker/:/var/lib/docker:ro
#      - /dev/disk/:/dev/disk:ro
#    deploy:
#      resources:
#        limits:
#          cpus: '0.1'
#          memory: 128M
#
#  grafana-agent:
#    image: grafana/agent:latest
#    container_name: grafana-agent
#    restart: always
#    volumes:
#      - ./monitoring/grafana-agent.yml:/etc/agent/agent.yml:ro
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#      - /proc:/host/proc:ro
#      - /sys:/host/sys:ro
#    command:
#      - -config.file=/etc/agent/agent.yml
#      - -config.expand-env
#    network_mode: host
#    pid: host
#    depends_on:
#      - tech-insights-api
#      - node-exporter
#      - cadvisor
#    deploy:
#      resources:
#        limits:
#          cpus: '0.2'
#          memory: 128M
